---
export interface Props {
  post: any;
}

import { Icon } from "astro-icon/components";

const { post } = Astro.props;
console.log("soical links", post);
---

<div class="animation">
  <div class="pr-3 pl-3 m-1 flex space-evenly items-center border-solid border-2 border-slate-600 hover:border-slate-300 rounded-md cursor-pointer ease-in-out duration-300">
    <div><img class="m-3 w-5 h-5" src={post.frontmatter.socialimg} /></div>
    <div class="w-48 max-w-80">
      <a href={post.url}>
        <h1 class="font-oldstandard">
          {post.frontmatter.title}
        </h1>
      </a>
      <p
        class="flex text-left font-poppins font-thin mr-16 ml-16 leading-tight text-sm uppercase text-blue-90"
      >
      </p>
    </div>
    <div><Icon name="elips" /></div>
  </div>
</div>

<style>
  .animation {
    opacity: 0;
    transition: all 0.7s ease-out;
    transition-delay: 0.4s;
  }

  .scroll-animation {
    opacity: 1;
    transform: translateX(0);
  }
</style>
<script>
  const the_animation = document.querySelectorAll(".animation");

  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          // Check for "seen" class and element visibility
          if (
            !entry.target.classList.contains("seen") &&
            (entry.target as HTMLElement).offsetParent !== null
          ) {
            entry.target.classList.add("scroll-animation");
            entry.target.classList.add("seen");

            // Unobserve element after animation (optional)
            observer.unobserve(entry.target);
          }
        }
      });
    },
    { threshold: 0.1 },
  );

  for (let i = 0; i < the_animation.length; i++) {
    const elements = the_animation[i];
    observer.observe(elements);
  }
</script>
